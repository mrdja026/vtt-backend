2025-05-10 13:25:35,125 - semgrep.run_scan - DEBUG - semgrep version 1.2.0
2025-05-10 13:25:35,130 - semgrep.git - DEBUG - Failed to get project url from 'git ls-remote': Command failed with exit code: 128
-----
Command failed with output:
fatal: No remote configured to list refs from.


Failed to run 'git ls-remote --get-url'. Possible reasons:

- the git binary is not available
- the current working directory is not a git repository
- the baseline commit is not a parent of the current commit
    (if you are running through semgrep-app, check if you are setting `SEMGREP_BRANCH` or `SEMGREP_BASELINE_COMMIT` properly)
- the current working directory is not marked as safe
    (fix with `git config --global --add safe.directory $(pwd)`)

Try running the command yourself to debug the issue.
2025-05-10 13:25:35,131 - semgrep.config_resolver - DEBUG - Loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-05-10 13:25:35,133 - semgrep.config_resolver - DEBUG - Done loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-05-10 13:25:35,137 - semgrep.config_resolver - DEBUG - Saving rules to /tmp/semgrep-zrihm68t.rules
2025-05-10 13:25:35,430 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEIKT3UIl/semgrep/bin/semgrep-core-proprietary'.
2025-05-10 13:25:36,324 - semgrep.rule_lang - DEBUG - semgrep-core validation response: valid=True
2025-05-10 13:25:36,324 - semgrep.rule_lang - DEBUG - semgrep-core validation succeeded
2025-05-10 13:25:36,324 - semgrep.rule_lang - DEBUG - RPC validation succeeded
2025-05-10 13:25:36,325 - semgrep.config_resolver - DEBUG - loaded 1 configs in 1.1942076683044434
2025-05-10 13:25:36,617 - semgrep.run_scan - VERBOSE - running 1250 rules from 1 config /home/runner/workspace/.config/.semgrep/semgrep_rules.json_0
2025-05-10 13:25:36,617 - semgrep.run_scan - VERBOSE - No .semgrepignore found. Using default .semgrepignore rules. See the docs for the list of default ignores: https://semgrep.dev/docs/cli-usage/#ignore-files
2025-05-10 13:25:36,620 - semgrep.run_scan - VERBOSE - Rules:
2025-05-10 13:25:36,620 - semgrep.run_scan - VERBOSE - <SKIPPED DATA (too many entries; use --max-log-list-entries)>
2025-05-10 13:25:36,835 - semgrep.core_runner - DEBUG - Passing whole rules directly to semgrep_core
2025-05-10 13:25:37,001 - semgrep.core_runner - DEBUG - Running Semgrep engine with command:
2025-05-10 13:25:37,001 - semgrep.core_runner - DEBUG - /tmp/_MEIKT3UIl/semgrep/bin/opengrep-core -json -rules /tmp/tmp6wt419n8.json -j 8 -targets /tmp/tmpfkjmdwo6 -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
2025-05-10 13:25:38,801 - semgrep.core_runner - DEBUG - --- semgrep-core stderr ---
[00.06][[34mINFO[0m]: Executed as: /tmp/_MEIKT3UIl/semgrep/bin/opengrep-core -json -rules /tmp/tmp6wt419n8.json -j 8 -targets /tmp/tmpfkjmdwo6 -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
[00.06][[34mINFO[0m]: Version: 1.2.0
[00.06][[34mINFO[0m]: Parsing rules in /tmp/tmp6wt419n8.json
[00.95][[34mINFO[0m]: scan: processing 93 files (skipping 0), with 375 rules (skipping 0 )
[01.75][[34mINFO[0m]: Custom ignore pattern: None
[01.75][[34mINFO[0m]: Custom ignore pattern: None
--- end semgrep-core stderr ---
2025-05-10 13:25:38,808 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('internal/character/repository.go'), 'config..semgrep.vendored-rules.go.lang.security.audit.database.string-formatted-query') match_id = 80a9b575fcfab5384e7f6e86d95eec9207864946ec4c2a210ce27bbf40c44083c841ac03a1be7d5e2112fd5c11ac563bb811cf187b8b3b0f0b73ed73c983bcdf_0
2025-05-10 13:25:38,809 - semgrep.rule_match - DEBUG - match_key = ('r.db (?i).*(db|database) r.db.Exec("...") r.db.Exec(`\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.Exec(fmt.$P("...", ...)) r.db.ExecContext($CTX, `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.ExecContext($CTX, fmt.$P("...", ...)) r.db.Query(`\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.Query(fmt.$P("...", ...)) r.db.QueryContext($CTX, `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.QueryContext($CTX, fmt.$P("...", ...)) r.db.QueryRow($CTX, `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.QueryRow($CTX, fmt.$U("...", ...)) r.db.QueryRow(`\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.QueryRow(fmt.$P("...", ...)) r.db.QueryRowContext($CTX, `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.QueryRowContext($CTX, fmt.$P("...", ...)) query = `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ... query = fmt.Fprintf($F, "$SQLSTR", ...) query = fmt.Printf("$SQLSTR", ...) query = fmt.Sprintf("$SQLSTR", ...) func GetMultiple(...) {\n    ...\n    r.db.Exec(query, ...)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.ExecContext($CTX, query, ...)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.Query(query, ...)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.QueryContext($CTX, query)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.QueryRow($CTX, query)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.QueryRow(query)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.QueryRowContext($CTX, query, ...)\n    ...\n}\n r.db.ExecContext($CTX, "...") r.db.Query("...") r.db.QueryContext($CTX, "...") r.db.QueryRow("...") r.db.QueryRow($CTX, "...") r.db.QueryRowContext($CTX, "...") $VAR = "..." + "..."\n...\nr.db.$SINK(..., $VAR, ...)\n', PosixPath('internal/character/repository.go'), 'config..semgrep.vendored-rules.go.lang.security.audit.database.string-formatted-query') match_id = 3edb28fa6c4b9940d70c85e04e59868d870e7300e0dd6d2930dec17772c89f7f911d325bb0d6002988ec73b8b7cea5065429a05fe3166b62b4aa18e525afd31c_0
2025-05-10 13:25:38,810 - semgrep.rule_match - DEBUG - match_key = ('r.db (?i).*(db|database) r.db.Exec("...") r.db.Exec(`\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.Exec(fmt.$P("...", ...)) r.db.ExecContext($CTX, `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.ExecContext($CTX, fmt.$P("...", ...)) r.db.Query(`\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.Query(fmt.$P("...", ...)) r.db.QueryContext($CTX, `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.QueryContext($CTX, fmt.$P("...", ...)) r.db.QueryRow($CTX, `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.QueryRow($CTX, fmt.$U("...", ...)) r.db.QueryRow(`\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.QueryRow(fmt.$P("...", ...)) r.db.QueryRowContext($CTX, `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.QueryRowContext($CTX, fmt.$P("...", ...)) query = `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ... query = fmt.Fprintf($F, "$SQLSTR", ...) query = fmt.Printf("$SQLSTR", ...) query = fmt.Sprintf("$SQLSTR", ...) func GetMultiple(...) {\n    ...\n    r.db.Exec(query, ...)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.ExecContext($CTX, query, ...)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.Query(query, ...)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.QueryContext($CTX, query)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.QueryRow($CTX, query)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.QueryRow(query)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.QueryRowContext($CTX, query, ...)\n    ...\n}\n r.db.ExecContext($CTX, "...") r.db.Query("...") r.db.QueryContext($CTX, "...") r.db.QueryRow("...") r.db.QueryRow($CTX, "...") r.db.QueryRowContext($CTX, "...") $VAR = "..." + "..."\n...\nr.db.$SINK(..., $VAR, ...)\n', PosixPath('internal/character/repository.go'), 'config..semgrep.vendored-rules.go.lang.security.audit.database.string-formatted-query') match_id = 3edb28fa6c4b9940d70c85e04e59868d870e7300e0dd6d2930dec17772c89f7f911d325bb0d6002988ec73b8b7cea5065429a05fe3166b62b4aa18e525afd31c_0
2025-05-10 13:25:38,810 - semgrep.rule_match - DEBUG - match_key = ('r.db (?i).*(db|database) r.db.Exec("...") r.db.Exec(`\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.Exec(fmt.$P("...", ...)) r.db.ExecContext($CTX, `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.ExecContext($CTX, fmt.$P("...", ...)) r.db.Query(`\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.Query(fmt.$P("...", ...)) r.db.QueryContext($CTX, `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.QueryContext($CTX, fmt.$P("...", ...)) r.db.QueryRow($CTX, `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.QueryRow($CTX, fmt.$U("...", ...)) r.db.QueryRow(`\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.QueryRow(fmt.$P("...", ...)) r.db.QueryRowContext($CTX, `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ...) r.db.QueryRowContext($CTX, fmt.$P("...", ...)) query = `\n                SELECT \n                        id, user_id, name, race, class, level,\n                        strength, dexterity, constitution, intelligence, wisdom, charisma,\n                        hit_points, max_hit_points, armor_class, equipment_json, spells_json,\n                        created_at, updated_at\n                FROM characters\n                WHERE id IN (`+placeholders[0]+strings.Repeat(", ?"len(placeholders)-1) + ... query = fmt.Fprintf($F, "$SQLSTR", ...) query = fmt.Printf("$SQLSTR", ...) query = fmt.Sprintf("$SQLSTR", ...) func GetMultiple(...) {\n    ...\n    r.db.Exec(query, ...)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.ExecContext($CTX, query, ...)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.Query(query, ...)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.QueryContext($CTX, query)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.QueryRow($CTX, query)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.QueryRow(query)\n    ...\n}\n func GetMultiple(...) {\n    ...\n    r.db.QueryRowContext($CTX, query, ...)\n    ...\n}\n r.db.ExecContext($CTX, "...") r.db.Query("...") r.db.QueryContext($CTX, "...") r.db.QueryRow("...") r.db.QueryRow($CTX, "...") r.db.QueryRowContext($CTX, "...") $VAR = "..." + "..."\n...\nr.db.$SINK(..., $VAR, ...)\n', PosixPath('internal/character/repository.go'), 'config..semgrep.vendored-rules.go.lang.security.audit.database.string-formatted-query') match_id = 3edb28fa6c4b9940d70c85e04e59868d870e7300e0dd6d2930dec17772c89f7f911d325bb0d6002988ec73b8b7cea5065429a05fe3166b62b4aa18e525afd31c_0
2025-05-10 13:25:38,811 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('pkg/dnd5e/dice.go'), 'config..semgrep.vendored-rules.go.lang.security.audit.crypto.math-random-used') match_id = 29b41dc5f0f408ed64dcf03cce67a7a9d2ad8ea7f636910637d391a53d705aa99e46f5d22c7ae6f5dbd10f51073472eb5ac91cb6e258fb2a32768fcdfc93f346_0
2025-05-10 13:25:38,811 - semgrep.rule_match - DEBUG - match_key = ('math/rand math/rand ^(math/rand(\\/v[0-9]+)*)$ ...\nrand.New(...)\n ...\nrand.New(...)\n import "math/rand"\n import rand "math/rand"\n', PosixPath('pkg/dnd5e/dice.go'), 'config..semgrep.vendored-rules.go.lang.security.audit.crypto.math-random-used') match_id = c2b5ae2bb33281f0013972da8a6f0cba65030b63804b2dc764776446fc2de49ae455b7e73d76f2c83e96c47653741ab8ce3da4c73d0d208057c04d4ad8f7bac8_0
2025-05-10 13:25:38,812 - semgrep.rule_match - DEBUG - match_key = ('math/rand math/rand ^(math/rand(\\/v[0-9]+)*)$ ...\nrand.New(...)\n ...\nrand.New(...)\n import "math/rand"\n import rand "math/rand"\n', PosixPath('pkg/dnd5e/dice.go'), 'config..semgrep.vendored-rules.go.lang.security.audit.crypto.math-random-used') match_id = c2b5ae2bb33281f0013972da8a6f0cba65030b63804b2dc764776446fc2de49ae455b7e73d76f2c83e96c47653741ab8ce3da4c73d0d208057c04d4ad8f7bac8_0
2025-05-10 13:25:38,812 - semgrep.rule_match - DEBUG - match_key = ('math/rand math/rand ^(math/rand(\\/v[0-9]+)*)$ ...\nrand.New(...)\n ...\nrand.New(...)\n import "math/rand"\n import rand "math/rand"\n', PosixPath('pkg/dnd5e/dice.go'), 'config..semgrep.vendored-rules.go.lang.security.audit.crypto.math-random-used') match_id = c2b5ae2bb33281f0013972da8a6f0cba65030b63804b2dc764776446fc2de49ae455b7e73d76f2c83e96c47653741ab8ce3da4c73d0d208057c04d4ad8f7bac8_0
2025-05-10 13:25:38,814 - semgrep.core_runner - DEBUG - semgrep ran in 0:00:01.979040 on 33 files
2025-05-10 13:25:38,816 - semgrep.core_runner - DEBUG - findings summary: 2 warning, 0 error, 0 info
2025-05-10 13:25:38,820 - semgrep.app.auth - DEBUG - Getting API token from settings file
2025-05-10 13:25:38,820 - semgrep.app.auth - DEBUG - No API token found in settings file
2025-05-10 13:25:38,821 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEIKT3UIl/semgrep/bin/semgrep-core-proprietary'.
2025-05-10 13:25:38,936 - semgrep.output - VERBOSE - 
========================================
Files skipped:
========================================

  Always skipped by Opengrep:

   • <none>

  Skipped by .gitignore:
  (Disable by passing --no-git-ignore)

   • <all files not listed by `git ls-files` were skipped>

  Skipped by .semgrepignore:
  - https://semgrep.dev/docs/ignoring-files-folders-code/#understand-semgrep-defaults

   • <none>

  Skipped by --include patterns:

   • <none>

  Skipped by --exclude patterns:

   • <none>

  Files skipped due to insufficient read permissions:

   • <none>

  Skipped by limiting to files smaller than 1000000 bytes:
  (Adjust with the --max-target-bytes flag)

   • <none>

  Partially analyzed due to parsing or internal Opengrep errors

   • <none>

2025-05-10 13:25:38,938 - semgrep.output - INFO - Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.

Ran 309 rules on 33 files: 2 findings.
2025-05-10 13:25:38,938 - semgrep.app.version - DEBUG - Version cache does not exist
2025-05-10 13:25:38,969 - semgrep.metrics - VERBOSE - Not sending pseudonymous metrics since metrics are configured to OFF and registry usage is False
